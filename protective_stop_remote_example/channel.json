{
  "encoding": "cdr",
  "id": 24,
  "schema": "# PSTOP message type, used to safely control local and remote machines\n\n# We need to have access control, be able to configure the expected behavior, report state\n# and be able to have many to many interactions\n\n# The PSTOP message version\nuint8 VERSION = 0\n\nuint8 version\n\n# PSTOP message constants\nuint8 STOP = 0\nuint8 OK = 1\n\n# The PSTOP message id value from the above definitions.\nuint8 message\n\n# Used to notify if the PStop wants to become active, or not\nlifecycle_msgs/State state\n\n# Local timestamp of the machine or PSTOP sending this message\nbuiltin_interfaces/Time stamp\n\n# Unique ID for the machine or PSTOP\nunique_identifier_msgs/UUID id\n\n# Unique ID for the machine or PSTOP this message is sent to\nunique_identifier_msgs/UUID receiver_uuid\n\n# counter increments bgy 1 for every sent message, will not roll over in any realistic use case\nuint64 counter\n\n# machine expected heartbeat_timeout, defaults to 0 for PSTOP messages\nbuiltin_interfaces/Duration heartbeat_timeout\n\n# Checksum type (ex: CRC-16, SHA-256, MD5, etc)\nstring checksum_type\n\n# Checksum value, should be a hexadecimal string\nstring checksum_value\n\n# All items below are received from the other end of the bond (machine or PSTOP) and returned in the following message\n\n# Timestamp of the latest received message, defaults to 0 on new bonding request\nbuiltin_interfaces/Time received_stamp\n\n# rolling counter of the latest received message, defaults to 0 on new bonding request\n# counter increments by 1 for every sent message, will not roll over in any realistic use case\nuint64 received_counter\n\n================================================================================\nMSG: builtin_interfaces/Duration\n# Duration defines a period between two time points.\n# Messages of this datatype are of ROS Time following this design:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# Seconds component, range is valid over any possible int32 value.\nint32 sec\n\n# Nanoseconds component in the range of [0, 10e9).\nuint32 nanosec\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 10e9).\nuint32 nanosec\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: unique_identifier_msgs/UUID\n# A universally unique identifier (UUID).\n#\n#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n#  http://tools.ietf.org/html/rfc4122.html\n\nuint8[16] uuid\n",
  "schemaEncoding": "ros2msg",
  "schemaName": "protective_stop_msg/msg/ProtectiveStop",
  "topic": "/protective_stop"
}