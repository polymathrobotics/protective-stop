ProtectiveStop pstop
================================================================================
MSG: protective_stop_msg/ProtectiveStop
# PSTOP message type, used to safely control local and remote machines

# We need to have access control, be able to configure the expected behavior, report state
# and be able to have many to many interactions

# The PSTOP message version
uint8 VERSION = 0

uint8 version

# PSTOP message constants
uint8 STOP = 0
uint8 OK = 1

# The PSTOP message id value from the above definitions.
uint8 message

# Used to notify if the PStop wants to become active, or not
lifecycle_msgs/State state

# Local timestamp of the machine or PSTOP sending this message
builtin_interfaces/Time stamp

# Unique ID for the machine or PSTOP
unique_identifier_msgs/UUID id

# Unique ID for the machine or PSTOP this message is sent to
unique_identifier_msgs/UUID receiver_uuid

# counter increments bgy 1 for every sent message, will not roll over in any realistic use case
uint64 counter

# machine expected heartbeat_timeout, defaults to 0 for PSTOP messages
builtin_interfaces/Duration heartbeat_timeout

# Checksum type (ex: CRC-16, SHA-256, MD5, etc)
string checksum_type

# Checksum value, should be a hexadecimal string
string checksum_value

# All items below are received from the other end of the bond (machine or PSTOP) and returned in the following message

# Timestamp of the latest received message, defaults to 0 on new bonding request
builtin_interfaces/Time received_stamp

# rolling counter of the latest received message, defaults to 0 on new bonding request
# counter increments by 1 for every sent message, will not roll over in any realistic use case
uint64 received_counter

================================================================================
MSG: builtin_interfaces/Duration
# Duration defines a period between two time points.
# Messages of this datatype are of ROS Time following this design:
# https://design.ros2.org/articles/clock_and_time.html

# Seconds component, range is valid over any possible int32 value.
int32 sec

# Nanoseconds component in the range of [0, 10e9).
uint32 nanosec

================================================================================
MSG: builtin_interfaces/Time
# This message communicates ROS Time defined here:
# https://design.ros2.org/articles/clock_and_time.html

# The seconds component, valid over all int32 values.
int32 sec

# The nanoseconds component, valid in the range [0, 10e9).
uint32 nanosec

================================================================================
MSG: lifecycle_msgs/State
# Primary state definitions as depicted in:
# http://design.ros2.org/articles/node_lifecycle.html

# These are the primary states. State changes can only be requested when the
# node is in one of these states.

# Indicates state has not yet been set.
uint8 PRIMARY_STATE_UNKNOWN = 0

# This is the life cycle state the node is in immediately after being
# instantiated.
uint8 PRIMARY_STATE_UNCONFIGURED = 1

# This state represents a node that is not currently performing any processing.
uint8 PRIMARY_STATE_INACTIVE = 2

# This is the main state of the node's life cycle. While in this state, the node
# performs any processing, responds to service requests, reads and processes
# data, produces output, etc.
uint8 PRIMARY_STATE_ACTIVE = 3

# The finalized state is the state in which the node ends immediately before
# being destroyed.
uint8 PRIMARY_STATE_FINALIZED = 4

# Temporary intermediate states. When a transition is requested, the node
# changes its state into one of these states.

# In this transition state the node's onConfigure callback will be called to
# allow the node to load its configuration and conduct any required setup.
uint8 TRANSITION_STATE_CONFIGURING = 10

# In this transition state the node's callback onCleanup will be called to clear
# all state and return the node to a functionally equivalent state as when
# first created.
uint8 TRANSITION_STATE_CLEANINGUP = 11

# In this transition state the callback onShutdown will be executed to do any
# cleanup necessary before destruction.
uint8 TRANSITION_STATE_SHUTTINGDOWN = 12

# In this transition state the callback onActivate will be executed to do any
# final preparations to start executing.
uint8 TRANSITION_STATE_ACTIVATING = 13

# In this transition state the callback onDeactivate will be executed to do any
# cleanup to start executing, and reverse the onActivate changes.
uint8 TRANSITION_STATE_DEACTIVATING = 14

# This transition state is where any error may be cleaned up.
uint8 TRANSITION_STATE_ERRORPROCESSING = 15

# The state id value from the above definitions.
uint8 id

# A text label of the state.
string label

================================================================================
MSG: unique_identifier_msgs/UUID
# A universally unique identifier (UUID).
#
#  http://en.wikipedia.org/wiki/Universally_unique_identifier
#  http://tools.ietf.org/html/rfc4122.html

uint8[16] uuid
